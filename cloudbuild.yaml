# EstateIQ Model Training and Deployment Pipeline
# This Cloud Build configuration handles:
# 1. Training and validating the model
# 2. Uploading model artifacts if validation passes
# 3. Building and pushing the model serving container

steps:
######################
# Model Training     #
######################
- name: python:3.10
  id: train
  volumes:
  - name: model-data
    path: /model-data
  entrypoint: bash
  args:
    - '-c'
    - |
      # Create all necessary directories
      mkdir -p artifacts results/validation /model-data/artifacts /model-data/results/validation
      
      # Install dependencies
      pip install --no-cache-dir -r requirements.txt

      # Run training with proper Python path
      export PYTHONPATH=/workspace
      python -m src.model.train
      
      # List files to debug
      echo "Listing artifacts directory:"
      ls -la artifacts/
      echo "Listing results directory:"
      ls -la results/validation/
      
      # Copy artifacts to shared volume
      if [ -f artifacts/model_latest.joblib ]; then
        cp artifacts/model_latest.joblib /model-data/artifacts/
      else
        echo "Error: model_latest.joblib not found"
        exit 1
      fi
      
      if [ -f results/validation/validation_latest.json ]; then
        cp results/validation/validation_latest.json /model-data/results/validation/
      else
        echo "Error: validation_latest.json not found"
        exit 1
      fi

  env:
    # MLOps Configuration
    - 'ARTIFACT_REGISTRY=${_ARTIFACT_REGISTRY}'
    - 'MODEL_PATH=${_MODEL_PATH}'
    - 'REGION=${_REGION}'
    - 'PROJECT_ID=${_PROJECT_ID}'
    - 'MLFLOW_TRACKING_URI=${_MLFLOW_TRACKING_URI}'
    
    # Notification Settings
    - 'GMAIL_APP_PASSWORD=${_GMAIL_APP_PASSWORD}'
    - 'NOTIFICATION_EMAIL=${_NOTIFICATION_EMAIL}'
    
    # Model Validation Thresholds
    - 'VALIDATION_R2_THRESHOLD=0.8'
    - 'VALIDATION_RMSE_THRESHOLD=1.0'
    - 'VALIDATION_MAE_THRESHOLD=0.8'

######################
# Model Validation   #
######################
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: validate
  volumes:
  - name: model-data
    path: /model-data
  waitFor: ['train']
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      # Install required packages
      apt-get update && apt-get install -y jq bc
      
      echo "Checking local validation results..."
      
      # Check if validation file exists
      if [ ! -f "/model-data/results/validation/validation_latest.json" ]; then
        echo "Validation file not found"
        exit 1
      fi
      
      # Extract new model metrics
      jq -r '.metrics.r2' "/model-data/results/validation/validation_latest.json" > /model-data/new_r2.txt
      
      # Check if metrics exist
      if [ ! -s "/model-data/new_r2.txt" ]; then
        echo "No metrics found in validation results"
        exit 1
      fi
      
      echo "Checking metrics against thresholds..."
      
      # Check if current production model exists
      if gsutil -q stat gs://${_ARTIFACT_REGISTRY}/${_MODEL_PATH}/current/metrics.json; then
        echo "Found existing production model, comparing metrics..."
        gsutil cp gs://${_ARTIFACT_REGISTRY}/${_MODEL_PATH}/current/metrics.json /model-data/current_metrics.json
        jq -r '.metrics.r2' /model-data/current_metrics.json > /model-data/current_r2.txt
        
        new_r2=$(cat /model-data/new_r2.txt)
        current_r2=$(cat /model-data/current_r2.txt)
        
        echo "New R2: $new_r2"
        echo "Current R2: $current_r2"
        
        if (( $(echo "$new_r2 < $current_r2" | bc -l) )); then
          echo "New model ($new_r2) worse than current ($current_r2)"
          exit 1
        fi
        echo "New model ($new_r2) is at least as good as current ($current_r2)"
      else
        echo "No current production model found. This will be the first deployment."
      fi

######################
# Artifact Upload    #
######################
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
  id: upload
  volumes:
  - name: model-data
    path: /model-data
  waitFor: ['validate']
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      # Update production version
      gsutil cp /model-data/artifacts/model_latest.joblib \
        gs://${_ARTIFACT_REGISTRY}/${_MODEL_PATH}/current/model.joblib
      gsutil cp /model-data/results/validation/validation_latest.json \
        gs://${_ARTIFACT_REGISTRY}/${_MODEL_PATH}/current/metrics.json

######################
# Container Build    #
######################
- name: 'gcr.io/cloud-builders/docker'
  id: build
  waitFor: ['upload']
  args: [
    'build',
    '-t', '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/estateiq-models/prediction-service:latest',
    '-f', 'src/deployment/Dockerfile',
    '.'
  ]

# Push latest version
- name: 'gcr.io/cloud-builders/docker'
  id: push
  waitFor: ['build']
  args: [
    'push',
    '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/estateiq-models/prediction-service:latest'
  ]

substitutions:
  _PROJECT_ID: estateiqclone
  _ARTIFACT_REGISTRY: estateiq-models
  _MODEL_PATH: models/estate_price_prediction
  _REGION: us-central1
  _MLFLOW_TRACKING_URI: sqlite:///mlflow.db
  _GMAIL_APP_PASSWORD: ""
  _NOTIFICATION_EMAIL: ""

options:
  dynamic_substitutions: true
  logging: CLOUD_LOGGING_ONLY
