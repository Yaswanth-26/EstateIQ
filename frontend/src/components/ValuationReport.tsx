"use client";

import { useRef, useState } from 'react';
import dynamic from 'next/dynamic';
import { downloadPDF } from '@/lib/downloadPDF';
import { useTheme } from 'next-themes';
// Dynamically import PropertyMap with SSR disabled
const PropertyMap = dynamic(() => import('./PropertyMap'), { ssr: false });

import { FormData as ValuationReportPropForm } from '@/app/(dashboard)/valuation/page';

interface ValuationReportProps {
  formData: ValuationReportPropForm;
  prediction: {
    prediction: number;
  };
}
const ValuationReport: React.FC<ValuationReportProps> = ({ formData, prediction }) => {
  const reportRef = useRef<HTMLDivElement>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleDownload = async () => {
    if (!reportRef.current) return;
    setIsGenerating(true);
    setError(null);

    try {
      // Create a clone of the report element for PDF generation
      const clone = reportRef.current.cloneNode(true) as HTMLElement;
      clone.classList.remove('dark');
      clone.querySelectorAll('[class*="dark:"]').forEach(element => {
        element.classList.forEach(className => {
          if (className.startsWith('dark:')) {
            element.classList.remove(className);
          }
        });
      });
      document.body.appendChild(clone);

      // Generate PDF from the clone
      await downloadPDF(clone, 'property-valuation-report.pdf');

      // Remove the clone
      document.body.removeChild(clone);
    } catch (err) {
      setError('Failed to generate PDF. Please try again.');
      console.error('PDF generation error:', err);
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div className="space-y-6">
      <div ref={reportRef} className="bg-white dark:bg-gray-800 p-8 rounded-lg shadow-sm">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Property Valuation Report</h1>
          <p className="text-gray-500 dark:text-gray-400 mt-2">Generated by EstateIQ</p>
        </div>

        <div className="space-y-6">
          <section>
            <h2 className="text-xl font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700 text-gray-900 dark:text-white">
              Property Details
            </h2>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <p className="text-gray-600 dark:text-gray-400">Gross Area</p>
                <p className="font-medium text-gray-900 dark:text-white">{formData.GROSS_AREA} sq ft</p>
              </div>
              <div>
                <p className="text-gray-600 dark:text-gray-400">Living Area</p>
                <p className="font-medium text-gray-900 dark:text-white">{formData.LIVING_AREA} sq ft</p>
              </div>
              <div>
                <p className="text-gray-600 dark:text-gray-400">Land Area</p>
                <p className="font-medium text-gray-900 dark:text-white">{formData.LAND_SF} sq ft</p>
              </div>
              <div>
                <p className="text-gray-600 dark:text-gray-400">Year Built</p>
                <p className="font-medium text-gray-900 dark:text-white">{formData.YR_BUILT}</p>
              </div>
            </div>
          </section>

          <section>
            <h2 className="text-xl font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700 text-gray-900 dark:text-white">
              Room Information
            </h2>
            <div className="grid grid-cols-3 gap-4">
              <div>
                <p className="text-gray-600 dark:text-gray-400">Bedrooms</p>
                <p className="font-medium text-gray-900 dark:text-white">{formData.BED_RMS}</p>
              </div>
              <div>
                <p className="text-gray-600 dark:text-gray-400">Full Bathrooms</p>
                <p className="font-medium text-gray-900 dark:text-white">{formData.FULL_BTH}</p>
              </div>
              <div>
                <p className="text-gray-600 dark:text-gray-400">Half Bathrooms</p>
                <p className="font-medium text-gray-900 dark:text-white">{formData.HLF_BTH}</p>
              </div>
            </div>
          </section>

          {/* Map Section */}
          {formData.ZIP_CODE && (
            <section>
              <h2 className="text-xl font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700 text-gray-900 dark:text-white">
                Property Location (Approximate)
              </h2>
              <div className="h-64 rounded-lg overflow-hidden">
                <PropertyMap zipCode={formData.ZIP_CODE} />
              </div>
              <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">Map centered on the provided Zip Code.</p>
            </section>
          )}

          <section className="bg-blue-50 dark:bg-blue-900/20 p-6 rounded-lg">
            <h2 className="text-xl font-semibold mb-2 text-gray-900 dark:text-white">Estimated Property Value</h2>
            <p className="text-3xl font-bold text-blue-600 dark:text-blue-400">
              ${new Intl.NumberFormat('en-US').format(Math.round(prediction.prediction))}
            </p>
          </section>

          <footer className="text-sm text-gray-500 dark:text-gray-400 mt-8 pt-4 border-t border-gray-200 dark:border-gray-700">
            <p>Report generated on {new Date().toLocaleDateString()}</p>
            <p>This valuation is an estimate based on the provided information and market data.</p>
          </footer>
        </div>
      </div>

      <div className="space-y-2">
        {error && (
          <div className="text-red-600 dark:text-red-400 text-sm text-center bg-red-50 dark:bg-red-900/20 p-2 rounded">
            {error}
          </div>
        )}
        <button
          onClick={handleDownload}
          disabled={isGenerating}
          className="w-full bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition-colors disabled:bg-blue-300 dark:disabled:bg-blue-700"
        >
          {isGenerating ? (
            <span className="flex items-center justify-center">
              <svg className="animate-spin -ml-1 mr-3 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Generating PDF...
            </span>
          ) : (
            "Download PDF Report"
          )}
        </button>
      </div>
    </div>
  );
};

export default ValuationReport;
