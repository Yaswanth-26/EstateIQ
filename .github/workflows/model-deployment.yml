name: Model Deployment Pipeline

on:
  workflow_run:
    workflows: ["Model Training Pipeline"]
    types:
      - completed
  workflow_dispatch:

env:
  PROJECT_ID: estateiqclone
  REGION: us-central1
  ARTIFACT_REGISTRY: estateiq-models
  MODEL_PATH: models/estate_price_prediction
  SA_EMAIL: self-522@estateiqclone.iam.gserviceaccount.com
  SERVICE_NAME: estateiq-prediction

jobs:
  deploy-model:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - uses: actions/checkout@v2

    - name: Google Auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        service_account: ${{ env.SA_EMAIL }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Verify Model Artifacts
      run: |
        if ! gcloud storage ls gs://${{ env.ARTIFACT_REGISTRY }}/${{ env.MODEL_PATH }}/current/metrics.json; then
          echo "Model artifacts not found. Training may have failed."
          exit 1
        fi
    
    - name: Wait for 2 minutes before deployment
      run: |
        echo "Waiting for 2 minutes before deployment..."
        sleep 120
        echo "Wait complete, proceeding with deployment"

    - name: Deploy to Cloud Run
      env:
        GOOGLE_CLOUD_PROJECT: ${{ env.PROJECT_ID }}
        REGION: ${{ env.REGION }}
        ARTIFACT_REGISTRY: ${{ env.ARTIFACT_REGISTRY }}
        MODEL_REGISTRY_PATH: ${{ env.MODEL_PATH }}
        SERVICE_ACCOUNT: ${{ env.SA_EMAIL }}
        PORT: "8080"
      run: |
        # Make script executable
        chmod +x scripts/start_service.sh
        
        # You can either use command line arguments or rely on environment variables
        ./scripts/start_service.sh \
          --project-id ${GOOGLE_CLOUD_PROJECT} \
          --region ${REGION} \
          --service-name ${SERVICE_NAME} \
          --artifact-registry ${ARTIFACT_REGISTRY} \
          --model-path ${MODEL_REGISTRY_PATH} \
          --service-account ${SERVICE_ACCOUNT}

    - name: Test Deployment
      env:
        GOOGLE_CLOUD_PROJECT: ${{ env.PROJECT_ID }}
        REGION: ${{ env.REGION }}
        ARTIFACT_REGISTRY: ${{ env.ARTIFACT_REGISTRY }}
        MODEL_REGISTRY_PATH: ${{ env.MODEL_PATH }}
        PORT: "8080"
      run: |
        # Make test script executable
        chmod +x scripts/test_inference.py
        
        # Wait for service to be ready
        sleep 30

        # Install dotenv
        pip install python-dotenv
        
        # Run test script (will use env variables)
        python scripts/test_inference.py

    - name: Get Cloud Run Service URL
      id: get_url
      run: |
        echo "Fetching URL for service: ${{ env.SERVICE_NAME }}"
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --platform managed --region ${{ env.REGION }} --format='value(status.url)' --project ${{ env.PROJECT_ID }})
        if [ -z "$SERVICE_URL" ]; then
          echo "::error::Failed to retrieve Cloud Run service URL."
          exit 1
        fi
        echo "Service URL: ${SERVICE_URL}"
        echo "SERVICE_URL=${SERVICE_URL}" >> $GITHUB_OUTPUT

    - name: Notify on Failure
      if: failure()
      run: |
        echo "Model deployment pipeline failed. Please check the logs for details."
        exit 1
